// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`ambiguous > config > default > (oh, no) => {} > with semi, with newline > it formats ../cases/gjs/component-class.gjs 1`] = `[Error: Parse Error at <anon>:11:3: 11:4]`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, with newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `[Error: Parse Error at <anon>:13:3: 13:4]`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, with newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, with newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, with newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"const num = 1;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, with newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
(oh, no) => {};

const What = <template>Hi</template>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, with newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2 = <template>Second module variable template.</template>,
  num = 1;
(oh, no) => {};

const bool = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4 = <template>Second module variable template.</template>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, with newline > it formats ../cases/gjs/simple.gjs 1`] = `
"<template>
  what
</template>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, with newline > it formats ../cases/gts/component-class.gts 1`] = `[Error: Parse Error at <anon>:20:3: 20:4]`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, with newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, with newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported: TemplateOnlyComponent<Signature> = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, with newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, with newline > it formats ../cases/gts/js-only.gts 1`] = `
"const num: number = 1;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, with newline > it formats ../cases/gts/mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private: TemplateOnlyComponent<Signature> = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, with newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, with newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>,
  num = 1;
(oh, no) => {};

const bool: boolean = false,
  ModVar3: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, with newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar2 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>,
  num = 1;
(oh, no) => {};

const bool: boolean = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar4 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, with newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, without newline > it formats ../cases/gjs/component-class.gjs 1`] = `[Error: Parse Error at <anon>:10:17: 10:18]`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, without newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `[Error: Parse Error at <anon>:12:17: 12:18]`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, without newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, without newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, without newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"const num = 1;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, without newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
(oh, no) => {};

const What = <template>Hi</template>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, without newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2 = <template>Second module variable template.</template>,
  num = 1;
(oh, no) => {};

const bool = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4 = <template>Second module variable template.</template>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, without newline > it formats ../cases/gjs/simple.gjs 1`] = `
"<template>
  what
</template>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, without newline > it formats ../cases/gts/component-class.gts 1`] = `[Error: Parse Error at <anon>:19:17: 19:18]`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, without newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, without newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported: TemplateOnlyComponent<Signature> = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, without newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, without newline > it formats ../cases/gts/js-only.gts 1`] = `
"const num: number = 1;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, without newline > it formats ../cases/gts/mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private: TemplateOnlyComponent<Signature> = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, without newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, without newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>,
  num = 1;
(oh, no) => {};

const bool: boolean = false,
  ModVar3: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, without newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar2 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>,
  num = 1;
(oh, no) => {};

const bool: boolean = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar4 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > with semi, without newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, with newline > it formats ../cases/gjs/component-class.gjs 1`] = `[Error: Parse Error at <anon>:11:3: 11:4]`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, with newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `[Error: Parse Error at <anon>:13:3: 13:4]`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, with newline > it formats ../cases/gjs/default-export.gjs 1`] = `[Error: Parse Error at <anon>:2:10: 2:12]`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, with newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `[Error: Parse Error at <anon>:5:14: 5:15]`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, with newline > it formats ../cases/gjs/js-only.gjs 1`] = `[Error: Parse Error at <anon>:2:20: 2:21]`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, with newline > it formats ../cases/gjs/mod-var.gjs 1`] = `[Error: Parse Error at <anon>:5:14: 5:15]`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, with newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `[Error: Parse Error at <anon>:9:18: 9:19]`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, with newline > it formats ../cases/gjs/simple.gjs 1`] = `[Error: Parse Error at <anon>:4:22: 4:24]`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, with newline > it formats ../cases/gts/component-class.gts 1`] = `[Error: Parse Error at <anon>:20:3: 20:4]`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, with newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, with newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `[Error: Parse Error at <anon>:14:14: 14:15]`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, with newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, with newline > it formats ../cases/gts/js-only.gts 1`] = `[Error: Parse Error at <anon>:2:20: 2:21]`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, with newline > it formats ../cases/gts/mod-var.gts 1`] = `[Error: Parse Error at <anon>:14:14: 14:15]`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, with newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, with newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `[Error: Parse Error at <anon>:20:18: 20:19]`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, with newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `[Error: Parse Error at <anon>:20:18: 20:19]`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, with newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, without newline > it formats ../cases/gjs/component-class.gjs 1`] = `[Error: Parse Error at <anon>:10:3: 10:4]`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, without newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `[Error: Parse Error at <anon>:12:3: 12:4]`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, without newline > it formats ../cases/gjs/default-export.gjs 1`] = `[Error: Parse Error at <anon>:2:10: 2:12]`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, without newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `[Error: Parse Error at <anon>:5:14: 5:15]`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, without newline > it formats ../cases/gjs/js-only.gjs 1`] = `[Error: Parse Error at <anon>:1:39: 1:40]`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, without newline > it formats ../cases/gjs/mod-var.gjs 1`] = `[Error: Parse Error at <anon>:5:14: 5:15]`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, without newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `[Error: Parse Error at <anon>:8:29: 8:30]`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, without newline > it formats ../cases/gjs/simple.gjs 1`] = `[Error: Parse Error at <anon>:4:22: 4:24]`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, without newline > it formats ../cases/gts/component-class.gts 1`] = `[Error: Parse Error at <anon>:19:3: 19:4]`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, without newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, without newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `[Error: Parse Error at <anon>:13:14: 13:15]`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, without newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, without newline > it formats ../cases/gts/js-only.gts 1`] = `[Error: Parse Error at <anon>:1:49: 1:50]`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, without newline > it formats ../cases/gts/mod-var.gts 1`] = `[Error: Parse Error at <anon>:13:14: 13:15]`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, without newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, without newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `[Error: Parse Error at <anon>:18:29: 18:30]`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, without newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `[Error: Parse Error at <anon>:18:29: 18:30]`;

exports[`ambiguous > config > default > (oh, no) => {} > without semi, without newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > with semi, with newline > it formats ../cases/gjs/component-class.gjs 1`] = `[Error: Parse Error at <anon>:11:3: 11:4]`;

exports[`ambiguous > config > default > (oops) => {} > with semi, with newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `[Error: Parse Error at <anon>:13:3: 13:4]`;

exports[`ambiguous > config > default > (oops) => {} > with semi, with newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > with semi, with newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > with semi, with newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"const num = 1;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > with semi, with newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
(oops) => {};

const What = <template>Hi</template>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > with semi, with newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2 = <template>Second module variable template.</template>,
  num = 1;
(oops) => {};

const bool = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4 = <template>Second module variable template.</template>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > with semi, with newline > it formats ../cases/gjs/simple.gjs 1`] = `
"<template>
  what
</template>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > with semi, with newline > it formats ../cases/gts/component-class.gts 1`] = `[Error: Parse Error at <anon>:20:3: 20:4]`;

exports[`ambiguous > config > default > (oops) => {} > with semi, with newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > with semi, with newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported: TemplateOnlyComponent<Signature> = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > with semi, with newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > with semi, with newline > it formats ../cases/gts/js-only.gts 1`] = `
"const num: number = 1;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > with semi, with newline > it formats ../cases/gts/mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private: TemplateOnlyComponent<Signature> = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > with semi, with newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > with semi, with newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>,
  num = 1;
(oops) => {};

const bool: boolean = false,
  ModVar3: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > with semi, with newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar2 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>,
  num = 1;
(oops) => {};

const bool: boolean = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar4 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > with semi, with newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > with semi, without newline > it formats ../cases/gjs/component-class.gjs 1`] = `[Error: Parse Error at <anon>:10:17: 10:18]`;

exports[`ambiguous > config > default > (oops) => {} > with semi, without newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `[Error: Parse Error at <anon>:12:17: 12:18]`;

exports[`ambiguous > config > default > (oops) => {} > with semi, without newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > with semi, without newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > with semi, without newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"const num = 1;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > with semi, without newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
(oops) => {};

const What = <template>Hi</template>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > with semi, without newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2 = <template>Second module variable template.</template>,
  num = 1;
(oops) => {};

const bool = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4 = <template>Second module variable template.</template>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > with semi, without newline > it formats ../cases/gjs/simple.gjs 1`] = `
"<template>
  what
</template>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > with semi, without newline > it formats ../cases/gts/component-class.gts 1`] = `[Error: Parse Error at <anon>:19:17: 19:18]`;

exports[`ambiguous > config > default > (oops) => {} > with semi, without newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > with semi, without newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported: TemplateOnlyComponent<Signature> = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > with semi, without newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > with semi, without newline > it formats ../cases/gts/js-only.gts 1`] = `
"const num: number = 1;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > with semi, without newline > it formats ../cases/gts/mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private: TemplateOnlyComponent<Signature> = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > with semi, without newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > with semi, without newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>,
  num = 1;
(oops) => {};

const bool: boolean = false,
  ModVar3: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > with semi, without newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar2 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>,
  num = 1;
(oops) => {};

const bool: boolean = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar4 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > with semi, without newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > without semi, with newline > it formats ../cases/gjs/component-class.gjs 1`] = `[Error: Parse Error at <anon>:11:3: 11:4]`;

exports[`ambiguous > config > default > (oops) => {} > without semi, with newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `[Error: Parse Error at <anon>:13:3: 13:4]`;

exports[`ambiguous > config > default > (oops) => {} > without semi, with newline > it formats ../cases/gjs/default-export.gjs 1`] = `[Error: Parse Error at <anon>:2:8: 2:10]`;

exports[`ambiguous > config > default > (oops) => {} > without semi, with newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `[Error: Parse Error at <anon>:5:12: 5:13]`;

exports[`ambiguous > config > default > (oops) => {} > without semi, with newline > it formats ../cases/gjs/js-only.gjs 1`] = `[Error: Parse Error at <anon>:2:18: 2:19]`;

exports[`ambiguous > config > default > (oops) => {} > without semi, with newline > it formats ../cases/gjs/mod-var.gjs 1`] = `[Error: Parse Error at <anon>:5:12: 5:13]`;

exports[`ambiguous > config > default > (oops) => {} > without semi, with newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `[Error: Parse Error at <anon>:9:16: 9:17]`;

exports[`ambiguous > config > default > (oops) => {} > without semi, with newline > it formats ../cases/gjs/simple.gjs 1`] = `[Error: Parse Error at <anon>:4:20: 4:22]`;

exports[`ambiguous > config > default > (oops) => {} > without semi, with newline > it formats ../cases/gts/component-class.gts 1`] = `[Error: Parse Error at <anon>:20:3: 20:4]`;

exports[`ambiguous > config > default > (oops) => {} > without semi, with newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > without semi, with newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `[Error: Parse Error at <anon>:14:12: 14:13]`;

exports[`ambiguous > config > default > (oops) => {} > without semi, with newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > without semi, with newline > it formats ../cases/gts/js-only.gts 1`] = `[Error: Parse Error at <anon>:2:18: 2:19]`;

exports[`ambiguous > config > default > (oops) => {} > without semi, with newline > it formats ../cases/gts/mod-var.gts 1`] = `[Error: Parse Error at <anon>:14:12: 14:13]`;

exports[`ambiguous > config > default > (oops) => {} > without semi, with newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > without semi, with newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `[Error: Parse Error at <anon>:20:16: 20:17]`;

exports[`ambiguous > config > default > (oops) => {} > without semi, with newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `[Error: Parse Error at <anon>:20:16: 20:17]`;

exports[`ambiguous > config > default > (oops) => {} > without semi, with newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > without semi, without newline > it formats ../cases/gjs/component-class.gjs 1`] = `[Error: Parse Error at <anon>:10:3: 10:4]`;

exports[`ambiguous > config > default > (oops) => {} > without semi, without newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `[Error: Parse Error at <anon>:12:3: 12:4]`;

exports[`ambiguous > config > default > (oops) => {} > without semi, without newline > it formats ../cases/gjs/default-export.gjs 1`] = `[Error: Parse Error at <anon>:2:8: 2:10]`;

exports[`ambiguous > config > default > (oops) => {} > without semi, without newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `[Error: Parse Error at <anon>:5:12: 5:13]`;

exports[`ambiguous > config > default > (oops) => {} > without semi, without newline > it formats ../cases/gjs/js-only.gjs 1`] = `[Error: Parse Error at <anon>:1:37: 1:38]`;

exports[`ambiguous > config > default > (oops) => {} > without semi, without newline > it formats ../cases/gjs/mod-var.gjs 1`] = `[Error: Parse Error at <anon>:5:12: 5:13]`;

exports[`ambiguous > config > default > (oops) => {} > without semi, without newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `[Error: Parse Error at <anon>:8:27: 8:28]`;

exports[`ambiguous > config > default > (oops) => {} > without semi, without newline > it formats ../cases/gjs/simple.gjs 1`] = `[Error: Parse Error at <anon>:4:20: 4:22]`;

exports[`ambiguous > config > default > (oops) => {} > without semi, without newline > it formats ../cases/gts/component-class.gts 1`] = `[Error: Parse Error at <anon>:19:3: 19:4]`;

exports[`ambiguous > config > default > (oops) => {} > without semi, without newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > without semi, without newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `[Error: Parse Error at <anon>:13:12: 13:13]`;

exports[`ambiguous > config > default > (oops) => {} > without semi, without newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > without semi, without newline > it formats ../cases/gts/js-only.gts 1`] = `[Error: Parse Error at <anon>:1:47: 1:48]`;

exports[`ambiguous > config > default > (oops) => {} > without semi, without newline > it formats ../cases/gts/mod-var.gts 1`] = `[Error: Parse Error at <anon>:13:12: 13:13]`;

exports[`ambiguous > config > default > (oops) => {} > without semi, without newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > (oops) => {} > without semi, without newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `[Error: Parse Error at <anon>:18:27: 18:28]`;

exports[`ambiguous > config > default > (oops) => {} > without semi, without newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `[Error: Parse Error at <anon>:18:27: 18:28]`;

exports[`ambiguous > config > default > (oops) => {} > without semi, without newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
(oops) => {};
"
`;

exports[`ambiguous > config > default > +"oops" > with semi, with newline > it formats ../cases/gjs/component-class.gjs 1`] = `[Error: Parse Error at <anon>:11:3: 11:4]`;

exports[`ambiguous > config > default > +"oops" > with semi, with newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `[Error: Parse Error at <anon>:13:3: 13:4]`;

exports[`ambiguous > config > default > +"oops" > with semi, with newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > with semi, with newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > with semi, with newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"const num = 1;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > with semi, with newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
+\\"oops\\";

const What = <template>Hi</template>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > with semi, with newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2 = <template>Second module variable template.</template>,
  num = 1;
+\\"oops\\";

const bool = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4 = <template>Second module variable template.</template>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > with semi, with newline > it formats ../cases/gjs/simple.gjs 1`] = `
"<template>
  what
</template>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > with semi, with newline > it formats ../cases/gts/component-class.gts 1`] = `[Error: Parse Error at <anon>:20:3: 20:4]`;

exports[`ambiguous > config > default > +"oops" > with semi, with newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > with semi, with newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported: TemplateOnlyComponent<Signature> = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > with semi, with newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > with semi, with newline > it formats ../cases/gts/js-only.gts 1`] = `
"const num: number = 1;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > with semi, with newline > it formats ../cases/gts/mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private: TemplateOnlyComponent<Signature> = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > with semi, with newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > with semi, with newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>,
  num = 1;
+\\"oops\\";

const bool: boolean = false,
  ModVar3: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > with semi, with newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar2 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>,
  num = 1;
+\\"oops\\";

const bool: boolean = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar4 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > with semi, with newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > with semi, without newline > it formats ../cases/gjs/component-class.gjs 1`] = `[Error: Parse Error at <anon>:10:17: 10:18]`;

exports[`ambiguous > config > default > +"oops" > with semi, without newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `[Error: Parse Error at <anon>:12:17: 12:18]`;

exports[`ambiguous > config > default > +"oops" > with semi, without newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > with semi, without newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > with semi, without newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"const num = 1;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > with semi, without newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
+\\"oops\\";

const What = <template>Hi</template>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > with semi, without newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2 = <template>Second module variable template.</template>,
  num = 1;
+\\"oops\\";

const bool = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4 = <template>Second module variable template.</template>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > with semi, without newline > it formats ../cases/gjs/simple.gjs 1`] = `
"<template>
  what
</template>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > with semi, without newline > it formats ../cases/gts/component-class.gts 1`] = `[Error: Parse Error at <anon>:19:17: 19:18]`;

exports[`ambiguous > config > default > +"oops" > with semi, without newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > with semi, without newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported: TemplateOnlyComponent<Signature> = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > with semi, without newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > with semi, without newline > it formats ../cases/gts/js-only.gts 1`] = `
"const num: number = 1;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > with semi, without newline > it formats ../cases/gts/mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private: TemplateOnlyComponent<Signature> = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > with semi, without newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > with semi, without newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>,
  num = 1;
+\\"oops\\";

const bool: boolean = false,
  ModVar3: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > with semi, without newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar2 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>,
  num = 1;
+\\"oops\\";

const bool: boolean = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar4 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > with semi, without newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > without semi, with newline > it formats ../cases/gjs/component-class.gjs 1`] = `[Error: Parse Error at <anon>:11:3: 11:4]`;

exports[`ambiguous > config > default > +"oops" > without semi, with newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `[Error: Parse Error at <anon>:13:3: 13:4]`;

exports[`ambiguous > config > default > +"oops" > without semi, with newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > without semi, with newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > without semi, with newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"const num = 1 + \\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > without semi, with newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
+\\"oops\\";

const What = <template>Hi</template>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > without semi, with newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2 = <template>Second module variable template.</template>,
  num = 1 + \\"oops\\";

const bool = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4 = <template>Second module variable template.</template>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > without semi, with newline > it formats ../cases/gjs/simple.gjs 1`] = `
"<template>
  what
</template>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > without semi, with newline > it formats ../cases/gts/component-class.gts 1`] = `[Error: Parse Error at <anon>:20:3: 20:4]`;

exports[`ambiguous > config > default > +"oops" > without semi, with newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export default (<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>) + \\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > without semi, with newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported: TemplateOnlyComponent<Signature> = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > without semi, with newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported =
  (<template>
    Exported variable template. Exported variable template. Exported variable
    template. Exported variable template. Exported variable template. Exported
    variable template. Exported variable template.
  </template> as TemplateOnlyComponent<Signature>) + \\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > without semi, with newline > it formats ../cases/gts/js-only.gts 1`] = `
"const num: number = 1 + \\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > without semi, with newline > it formats ../cases/gts/mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private: TemplateOnlyComponent<Signature> = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > without semi, with newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private =
  (<template>
    Private variable template. Private variable template. Private variable
    template. Private variable template. Private variable template. Private
    variable template. Private variable template.
  </template> as TemplateOnlyComponent<Signature>) + \\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > without semi, with newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>,
  num = 1 + \\"oops\\";

const bool: boolean = false,
  ModVar3: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > without semi, with newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar2 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>,
  num = 1 + \\"oops\\";

const bool: boolean = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar4 =
    (<template>
      Second module variable template.
    </template> as TemplateOnlyComponent<Signature>) + \\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > without semi, with newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

(<template>what</template> as TemplateOnlyComponent<Signature>) + \\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > without semi, without newline > it formats ../cases/gjs/component-class.gjs 1`] = `[Error: Parse Error at <anon>:10:3: 10:4]`;

exports[`ambiguous > config > default > +"oops" > without semi, without newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `[Error: Parse Error at <anon>:12:3: 12:4]`;

exports[`ambiguous > config > default > +"oops" > without semi, without newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > without semi, without newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > without semi, without newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"const num = 1 + \\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > without semi, without newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
+\\"oops\\";

const What = <template>Hi</template>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > without semi, without newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2 = <template>Second module variable template.</template>,
  num = 1 + \\"oops\\";

const bool = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4 = <template>Second module variable template.</template>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > without semi, without newline > it formats ../cases/gjs/simple.gjs 1`] = `
"<template>
  what
</template>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > without semi, without newline > it formats ../cases/gts/component-class.gts 1`] = `[Error: Parse Error at <anon>:19:3: 19:4]`;

exports[`ambiguous > config > default > +"oops" > without semi, without newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export default (<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>) + \\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > without semi, without newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported: TemplateOnlyComponent<Signature> = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > without semi, without newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported =
  (<template>
    Exported variable template. Exported variable template. Exported variable
    template. Exported variable template. Exported variable template. Exported
    variable template. Exported variable template.
  </template> as TemplateOnlyComponent<Signature>) + \\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > without semi, without newline > it formats ../cases/gts/js-only.gts 1`] = `
"const num: number = 1 + \\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > without semi, without newline > it formats ../cases/gts/mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private: TemplateOnlyComponent<Signature> = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > without semi, without newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private =
  (<template>
    Private variable template. Private variable template. Private variable
    template. Private variable template. Private variable template. Private
    variable template. Private variable template.
  </template> as TemplateOnlyComponent<Signature>) + \\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > without semi, without newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>,
  num = 1 + \\"oops\\";

const bool: boolean = false,
  ModVar3: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>;
+\\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > without semi, without newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar2 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>,
  num = 1 + \\"oops\\";

const bool: boolean = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar4 =
    (<template>
      Second module variable template.
    </template> as TemplateOnlyComponent<Signature>) + \\"oops\\";
"
`;

exports[`ambiguous > config > default > +"oops" > without semi, without newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

(<template>what</template> as TemplateOnlyComponent<Signature>) + \\"oops\\";
"
`;

exports[`ambiguous > config > default > /oops/ > with semi, with newline > it formats ../cases/gjs/component-class.gjs 1`] = `[Error: Parse Error at <anon>:11:3: 11:4]`;

exports[`ambiguous > config > default > /oops/ > with semi, with newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `[Error: Parse Error at <anon>:13:3: 13:4]`;

exports[`ambiguous > config > default > /oops/ > with semi, with newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template>;
/oops/;
"
`;

exports[`ambiguous > config > default > /oops/ > with semi, with newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
/oops/;
"
`;

exports[`ambiguous > config > default > /oops/ > with semi, with newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"const num = 1;
/oops/;
"
`;

exports[`ambiguous > config > default > /oops/ > with semi, with newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
/oops/;

const What = <template>Hi</template>;
/oops/;
"
`;

exports[`ambiguous > config > default > /oops/ > with semi, with newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2 = <template>Second module variable template.</template>,
  num = 1;
/oops/;

const bool = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4 = <template>Second module variable template.</template>;
/oops/;
"
`;

exports[`ambiguous > config > default > /oops/ > with semi, with newline > it formats ../cases/gjs/simple.gjs 1`] = `
"<template>
  what
</template>;
/oops/;
"
`;

exports[`ambiguous > config > default > /oops/ > with semi, with newline > it formats ../cases/gts/component-class.gts 1`] = `[Error: Parse Error at <anon>:20:3: 20:4]`;

exports[`ambiguous > config > default > /oops/ > with semi, with newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
/oops/;
"
`;

exports[`ambiguous > config > default > /oops/ > with semi, with newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported: TemplateOnlyComponent<Signature> = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
/oops/;
"
`;

exports[`ambiguous > config > default > /oops/ > with semi, with newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
/oops/;
"
`;

exports[`ambiguous > config > default > /oops/ > with semi, with newline > it formats ../cases/gts/js-only.gts 1`] = `
"const num: number = 1;
/oops/;
"
`;

exports[`ambiguous > config > default > /oops/ > with semi, with newline > it formats ../cases/gts/mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private: TemplateOnlyComponent<Signature> = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
/oops/;
"
`;

exports[`ambiguous > config > default > /oops/ > with semi, with newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
/oops/;
"
`;

exports[`ambiguous > config > default > /oops/ > with semi, with newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>,
  num = 1;
/oops/;

const bool: boolean = false,
  ModVar3: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>;
/oops/;
"
`;

exports[`ambiguous > config > default > /oops/ > with semi, with newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar2 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>,
  num = 1;
/oops/;

const bool: boolean = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar4 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>;
/oops/;
"
`;

exports[`ambiguous > config > default > /oops/ > with semi, with newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
/oops/;
"
`;

exports[`ambiguous > config > default > /oops/ > with semi, without newline > it formats ../cases/gjs/component-class.gjs 1`] = `[Error: Parse Error at <anon>:10:17: 10:18]`;

exports[`ambiguous > config > default > /oops/ > with semi, without newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `[Error: Parse Error at <anon>:12:17: 12:18]`;

exports[`ambiguous > config > default > /oops/ > with semi, without newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template>;
/oops/;
"
`;

exports[`ambiguous > config > default > /oops/ > with semi, without newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
/oops/;
"
`;

exports[`ambiguous > config > default > /oops/ > with semi, without newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"const num = 1;
/oops/;
"
`;

exports[`ambiguous > config > default > /oops/ > with semi, without newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
/oops/;

const What = <template>Hi</template>;
/oops/;
"
`;

exports[`ambiguous > config > default > /oops/ > with semi, without newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2 = <template>Second module variable template.</template>,
  num = 1;
/oops/;

const bool = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4 = <template>Second module variable template.</template>;
/oops/;
"
`;

exports[`ambiguous > config > default > /oops/ > with semi, without newline > it formats ../cases/gjs/simple.gjs 1`] = `
"<template>
  what
</template>;
/oops/;
"
`;

exports[`ambiguous > config > default > /oops/ > with semi, without newline > it formats ../cases/gts/component-class.gts 1`] = `[Error: Parse Error at <anon>:19:17: 19:18]`;

exports[`ambiguous > config > default > /oops/ > with semi, without newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
/oops/;
"
`;

exports[`ambiguous > config > default > /oops/ > with semi, without newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported: TemplateOnlyComponent<Signature> = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
/oops/;
"
`;

exports[`ambiguous > config > default > /oops/ > with semi, without newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
/oops/;
"
`;

exports[`ambiguous > config > default > /oops/ > with semi, without newline > it formats ../cases/gts/js-only.gts 1`] = `
"const num: number = 1;
/oops/;
"
`;

exports[`ambiguous > config > default > /oops/ > with semi, without newline > it formats ../cases/gts/mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private: TemplateOnlyComponent<Signature> = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
/oops/;
"
`;

exports[`ambiguous > config > default > /oops/ > with semi, without newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
/oops/;
"
`;

exports[`ambiguous > config > default > /oops/ > with semi, without newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>,
  num = 1;
/oops/;

const bool: boolean = false,
  ModVar3: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>;
/oops/;
"
`;

exports[`ambiguous > config > default > /oops/ > with semi, without newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar2 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>,
  num = 1;
/oops/;

const bool: boolean = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar4 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>;
/oops/;
"
`;

exports[`ambiguous > config > default > /oops/ > with semi, without newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
/oops/;
"
`;

exports[`ambiguous > config > default > /oops/ > without semi, with newline > it formats ../cases/gjs/component-class.gjs 1`] = `[Error: Parse Error at <anon>:11:3: 11:4]`;

exports[`ambiguous > config > default > /oops/ > without semi, with newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `[Error: Parse Error at <anon>:13:3: 13:4]`;

exports[`ambiguous > config > default > /oops/ > without semi, with newline > it formats ../cases/gjs/default-export.gjs 1`] = `[Error: Parse Error at <anon>:2:6: 2:7]`;

exports[`ambiguous > config > default > /oops/ > without semi, with newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `[Error: Parse Error at <anon>:5:6: 5:7]`;

exports[`ambiguous > config > default > /oops/ > without semi, with newline > it formats ../cases/gjs/js-only.gjs 1`] = `[Error: Parse Error at <anon>:2:12: 2:13]`;

exports[`ambiguous > config > default > /oops/ > without semi, with newline > it formats ../cases/gjs/mod-var.gjs 1`] = `[Error: Parse Error at <anon>:7:1: 7:6]`;

exports[`ambiguous > config > default > /oops/ > without semi, with newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `[Error: Parse Error at <anon>:11:1: 11:6]`;

exports[`ambiguous > config > default > /oops/ > without semi, with newline > it formats ../cases/gjs/simple.gjs 1`] = `[Error: Parse Error at <anon>:4:18: 4:19]`;

exports[`ambiguous > config > default > /oops/ > without semi, with newline > it formats ../cases/gts/component-class.gts 1`] = `[Error: Parse Error at <anon>:20:3: 20:4]`;

exports[`ambiguous > config > default > /oops/ > without semi, with newline > it formats ../cases/gts/default-export.gts 1`] = `[Error: Parse Error at <anon>:13:6: 13:7]`;

exports[`ambiguous > config > default > /oops/ > without semi, with newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `[Error: Parse Error at <anon>:14:6: 14:7]`;

exports[`ambiguous > config > default > /oops/ > without semi, with newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `[Error: Parse Error at <anon>:14:6: 14:7]`;

exports[`ambiguous > config > default > /oops/ > without semi, with newline > it formats ../cases/gts/js-only.gts 1`] = `[Error: Parse Error at <anon>:2:12: 2:13]`;

exports[`ambiguous > config > default > /oops/ > without semi, with newline > it formats ../cases/gts/mod-var.gts 1`] = `[Error: Parse Error at <anon>:14:6: 14:7]`;

exports[`ambiguous > config > default > /oops/ > without semi, with newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `[Error: Parse Error at <anon>:14:6: 14:7]`;

exports[`ambiguous > config > default > /oops/ > without semi, with newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `[Error: Parse Error at <anon>:22:5: 22:10]`;

exports[`ambiguous > config > default > /oops/ > without semi, with newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `[Error: Parse Error at <anon>:23:1: 23:6]`;

exports[`ambiguous > config > default > /oops/ > without semi, with newline > it formats ../cases/gts/simple.gts 1`] = `[Error: Parse Error at <anon>:15:18: 15:19]`;

exports[`ambiguous > config > default > /oops/ > without semi, without newline > it formats ../cases/gjs/component-class.gjs 1`] = `[Error: Parse Error at <anon>:10:3: 10:4]`;

exports[`ambiguous > config > default > /oops/ > without semi, without newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `[Error: Parse Error at <anon>:12:3: 12:4]`;

exports[`ambiguous > config > default > /oops/ > without semi, without newline > it formats ../cases/gjs/default-export.gjs 1`] = `[Error: Parse Error at <anon>:2:6: 2:7]`;

exports[`ambiguous > config > default > /oops/ > without semi, without newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `[Error: Parse Error at <anon>:5:6: 5:7]`;

exports[`ambiguous > config > default > /oops/ > without semi, without newline > it formats ../cases/gjs/js-only.gjs 1`] = `[Error: Parse Error at <anon>:1:31: 1:32]`;

exports[`ambiguous > config > default > /oops/ > without semi, without newline > it formats ../cases/gjs/mod-var.gjs 1`] = `[Error: Parse Error at <anon>:7:1: 7:6]`;

exports[`ambiguous > config > default > /oops/ > without semi, without newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `[Error: Parse Error at <anon>:10:1: 10:6]`;

exports[`ambiguous > config > default > /oops/ > without semi, without newline > it formats ../cases/gjs/simple.gjs 1`] = `[Error: Parse Error at <anon>:4:18: 4:19]`;

exports[`ambiguous > config > default > /oops/ > without semi, without newline > it formats ../cases/gts/component-class.gts 1`] = `[Error: Parse Error at <anon>:19:3: 19:4]`;

exports[`ambiguous > config > default > /oops/ > without semi, without newline > it formats ../cases/gts/default-export.gts 1`] = `[Error: Parse Error at <anon>:12:6: 12:7]`;

exports[`ambiguous > config > default > /oops/ > without semi, without newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `[Error: Parse Error at <anon>:13:6: 13:7]`;

exports[`ambiguous > config > default > /oops/ > without semi, without newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `[Error: Parse Error at <anon>:13:6: 13:7]`;

exports[`ambiguous > config > default > /oops/ > without semi, without newline > it formats ../cases/gts/js-only.gts 1`] = `[Error: Parse Error at <anon>:1:41: 1:42]`;

exports[`ambiguous > config > default > /oops/ > without semi, without newline > it formats ../cases/gts/mod-var.gts 1`] = `[Error: Parse Error at <anon>:13:6: 13:7]`;

exports[`ambiguous > config > default > /oops/ > without semi, without newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `[Error: Parse Error at <anon>:13:6: 13:7]`;

exports[`ambiguous > config > default > /oops/ > without semi, without newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `[Error: Parse Error at <anon>:20:5: 20:10]`;

exports[`ambiguous > config > default > /oops/ > without semi, without newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `[Error: Parse Error at <anon>:21:1: 21:6]`;

exports[`ambiguous > config > default > /oops/ > without semi, without newline > it formats ../cases/gts/simple.gts 1`] = `[Error: Parse Error at <anon>:14:18: 14:19]`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, with newline > it formats ../cases/gjs/component-class.gjs 1`] = `
"import Component from \\"@glimmer/component\\";

/** It's a component */
class MyComponent extends Component {
  <template>
    <h1>
      Class top level template. Class top level template. Class top level
      template. Class top level template. Class top level template.
    </h1>
  </template>
  <template>oops</template>
}
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, with newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `
"import Component from \\"@glimmer/component\\";

/** It's a component */
class MyComponent extends Component {
  get whatever() {}

  <template>
    <h1>
      Class top level template. Class top level template. Class top level
      template. Class top level template. Class top level template.
    </h1>
  </template>
  <template>oops</template>
}
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, with newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template>
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, with newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, with newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"const num = 1;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, with newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
<template>
  oops
</template>

const What = <template>Hi</template>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, with newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2 = <template>Second module variable template.</template>,
  num = 1;
<template>
  oops
</template>

const bool = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4 = <template>Second module variable template.</template>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, with newline > it formats ../cases/gjs/simple.gjs 1`] = `
"<template>
  what
</template>
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, with newline > it formats ../cases/gts/component-class.gts 1`] = `
"import Component from \\"@glimmer/component\\";

export interface Signature {
  Element: HTMLElement;
  Args: {
    myArg: string;
  };
  Yields: [];
}

/** It's a component */
class MyComponent extends Component<Signature> {
  <template>
    <h1>
      Class top level template. Class top level template. Class top level
      template. Class top level template. Class top level template.
    </h1>
  </template>
  <template>oops</template>
}
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, with newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, with newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported: TemplateOnlyComponent<Signature> = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, with newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, with newline > it formats ../cases/gts/js-only.gts 1`] = `
"const num: number = 1;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, with newline > it formats ../cases/gts/mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private: TemplateOnlyComponent<Signature> = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, with newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, with newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>,
  num = 1;
<template>
  oops
</template>

const bool: boolean = false,
  ModVar3: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, with newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar2 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>,
  num = 1;
<template>
  oops
</template>

const bool: boolean = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar4 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, with newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, without newline > it formats ../cases/gjs/component-class.gjs 1`] = `
"import Component from \\"@glimmer/component\\";

/** It's a component */
class MyComponent extends Component {
  <template>
    <h1>
      Class top level template. Class top level template. Class top level
      template. Class top level template. Class top level template.
    </h1>
  </template>
  <template>oops</template>
}
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, without newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `
"import Component from \\"@glimmer/component\\";

/** It's a component */
class MyComponent extends Component {
  get whatever() {}

  <template>
    <h1>
      Class top level template. Class top level template. Class top level
      template. Class top level template. Class top level template.
    </h1>
  </template>
  <template>oops</template>
}
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, without newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template>
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, without newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, without newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"const num = 1;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, without newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
<template>
  oops
</template>
const What = <template>Hi</template>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, without newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2 = <template>Second module variable template.</template>,
  num = 1;
<template>
  oops
</template>
const bool = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4 = <template>Second module variable template.</template>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, without newline > it formats ../cases/gjs/simple.gjs 1`] = `
"<template>
  what
</template>
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, without newline > it formats ../cases/gts/component-class.gts 1`] = `
"import Component from \\"@glimmer/component\\";

export interface Signature {
  Element: HTMLElement;
  Args: {
    myArg: string;
  };
  Yields: [];
}

/** It's a component */
class MyComponent extends Component<Signature> {
  <template>
    <h1>
      Class top level template. Class top level template. Class top level
      template. Class top level template. Class top level template.
    </h1>
  </template>
  <template>oops</template>
}
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, without newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, without newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported: TemplateOnlyComponent<Signature> = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, without newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, without newline > it formats ../cases/gts/js-only.gts 1`] = `
"const num: number = 1;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, without newline > it formats ../cases/gts/mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private: TemplateOnlyComponent<Signature> = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, without newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, without newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>,
  num = 1;
<template>
  oops
</template>
const bool: boolean = false,
  ModVar3: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, without newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar2 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>,
  num = 1;
<template>
  oops
</template>

const bool: boolean = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar4 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > with semi, without newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, with newline > it formats ../cases/gjs/component-class.gjs 1`] = `
"import Component from \\"@glimmer/component\\";

/** It's a component */
class MyComponent extends Component {
  <template>
    <h1>
      Class top level template. Class top level template. Class top level
      template. Class top level template. Class top level template.
    </h1>
  </template>
  <template>oops</template>
}
"
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, with newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `
"import Component from \\"@glimmer/component\\";

/** It's a component */
class MyComponent extends Component {
  get whatever() {}

  <template>
    <h1>
      Class top level template. Class top level template. Class top level
      template. Class top level template. Class top level template.
    </h1>
  </template>
  <template>oops</template>
}
"
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, with newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template>
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, with newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, with newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"const num = 1;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, with newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
<template>
  oops
</template>

const What = <template>Hi</template>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, with newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2 = <template>Second module variable template.</template>,
  num = 1;
<template>
  oops
</template>

const bool = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4 = <template>Second module variable template.</template>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, with newline > it formats ../cases/gjs/simple.gjs 1`] = `
"<template>
  what
</template>
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, with newline > it formats ../cases/gts/component-class.gts 1`] = `
"import Component from \\"@glimmer/component\\";

export interface Signature {
  Element: HTMLElement;
  Args: {
    myArg: string;
  };
  Yields: [];
}

/** It's a component */
class MyComponent extends Component<Signature> {
  <template>
    <h1>
      Class top level template. Class top level template. Class top level
      template. Class top level template. Class top level template.
    </h1>
  </template>
  <template>oops</template>
}
"
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, with newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, with newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported: TemplateOnlyComponent<Signature> = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, with newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, with newline > it formats ../cases/gts/js-only.gts 1`] = `
"const num: number = 1;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, with newline > it formats ../cases/gts/mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private: TemplateOnlyComponent<Signature> = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, with newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, with newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>,
  num = 1;
<template>
  oops
</template>

const bool: boolean = false,
  ModVar3: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, with newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar2 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>,
  num = 1;
<template>
  oops
</template>

const bool: boolean = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar4 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, with newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, without newline > it formats ../cases/gjs/component-class.gjs 1`] = `
"import Component from \\"@glimmer/component\\";
/** It's a component */
class MyComponent extends Component {
  <template>
    <h1>
      Class top level template. Class top level template. Class top level
      template. Class top level template. Class top level template.
    </h1>
  </template>
  <template>oops</template>
}
"
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, without newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `
"import Component from \\"@glimmer/component\\";
/** It's a component */
class MyComponent extends Component {
  get whatever() {}

  <template>
    <h1>
      Class top level template. Class top level template. Class top level
      template. Class top level template. Class top level template.
    </h1>
  </template>
  <template>oops</template>
}
"
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, without newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template>
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, without newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, without newline > it formats ../cases/gjs/js-only.gjs 1`] = `
[SyntaxError: Unterminated regular expression. (1:42)
[0m[31m[1m>[22m[39m[90m 1 |[39m       [36mconst[39m num [33m=[39m [35m1[39m      [33m<[39m[33mtemplate[39m[33m>[39moops[33m<[39m[33m/[39m[33mtemplate[39m[33m>[39m[0m
[0m [90m   |[39m                                          [31m[1m^[22m[39m[0m]
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, without newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
<template>
  oops
</template>

const What = <template>Hi</template>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, without newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
[SyntaxError: Unterminated regular expression. (8:32)
[0m [90m  6 |[39m   [33mSecond[39m module variable template[33m.[39m[0m
[0m [90m  7 |[39m [33m<[39m[33m/[39m[33mtemplate[39m[33m>[39m[33m,[39m[0m
[0m[31m[1m>[22m[39m[90m  8 |[39m     num [33m=[39m [35m1[39m    [33m<[39m[33mtemplate[39m[33m>[39moops[33m<[39m[33m/[39m[33mtemplate[39m[33m>[39m[0m
[0m [90m    |[39m                                [31m[1m^[22m[39m[0m
[0m [90m  9 |[39m[0m
[0m [90m 10 |[39m [36mconst[39m bool [33m=[39m [36mfalse[39m[33m,[39m [33mModVar3[39m [33m=[39m[33m<[39m[33mtemplate[39m[33m>[39m[0m
[0m [90m 11 |[39m[0m]
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, without newline > it formats ../cases/gjs/simple.gjs 1`] = `
"<template>
  what
</template>
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, without newline > it formats ../cases/gts/component-class.gts 1`] = `
"import Component from \\"@glimmer/component\\";
export interface Signature {
  Element: HTMLElement;
  Args: {
    myArg: string;
  };
  Yields: [];
}

/** It's a component */
class MyComponent extends Component<Signature> {
  <template>
    <h1>
      Class top level template. Class top level template. Class top level
      template. Class top level template. Class top level template.
    </h1>
  </template>
  <template>oops</template>
}
"
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, without newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, without newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported: TemplateOnlyComponent<Signature> = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, without newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, without newline > it formats ../cases/gts/js-only.gts 1`] = `
[SyntaxError: Unterminated regular expression. (1:52)
[0m[31m[1m>[22m[39m[90m 1 |[39m       [36mconst[39m num[33m:[39m   number [33m=[39m [35m1[39m      [33m<[39m[33mtemplate[39m[33m>[39moops[33m<[39m[33m/[39m[33mtemplate[39m[33m>[39m[0m
[0m [90m   |[39m                                                    [31m[1m^[22m[39m[0m]
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, without newline > it formats ../cases/gts/mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private: TemplateOnlyComponent<Signature> = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, without newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, without newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
[SyntaxError: Unterminated regular expression. (18:32)
[0m [90m 16 |[39m   [33mSecond[39m module variable template[33m.[39m[0m
[0m [90m 17 |[39m [33m<[39m[33m/[39m[33mtemplate[39m[33m>[39m[33m,[39m[0m
[0m[31m[1m>[22m[39m[90m 18 |[39m     num [33m=[39m [35m1[39m    [33m<[39m[33mtemplate[39m[33m>[39moops[33m<[39m[33m/[39m[33mtemplate[39m[33m>[39m[0m
[0m [90m    |[39m                                [31m[1m^[22m[39m[0m
[0m [90m 19 |[39m[0m
[0m [90m 20 |[39m     [36mconst[39m bool[33m:[39m boolean [33m=[39m [36mfalse[39m[33m,[39m [33mModVar3[39m[33m:[39m [33mTemplateOnlyComponent[39m[33m<[39m[33mSignature[39m[33m>[39m  [33m=[39m [33m<[39m[33mtemplate[39m[33m>[39m[0m
[0m [90m 21 |[39m[0m]
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, without newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
[SyntaxError: Unterminated regular expression. (18:32)
[0m [90m 16 |[39m   [33mSecond[39m module variable template[33m.[39m[0m
[0m [90m 17 |[39m [33m<[39m[33m/[39m[33mtemplate[39m[33m>[39m [36mas[39m [33mTemplateOnlyComponent[39m[33m<[39m[33mSignature[39m[33m>[39m[33m,[39m[0m
[0m[31m[1m>[22m[39m[90m 18 |[39m     num [33m=[39m [35m1[39m    [33m<[39m[33mtemplate[39m[33m>[39moops[33m<[39m[33m/[39m[33mtemplate[39m[33m>[39m[0m
[0m [90m    |[39m                                [31m[1m^[22m[39m[0m
[0m [90m 19 |[39m[0m
[0m [90m 20 |[39m[0m
[0m [90m 21 |[39m [36mconst[39m bool[33m:[39m boolean [33m=[39m [36mfalse[39m[33m,[39m [33mModVar3[39m  [33m=[39m [33m<[39m[33mtemplate[39m[33m>[39m[0m]
`;

exports[`ambiguous > config > default > <template>oops</template> > without semi, without newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
<template>
  oops
</template>
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, with newline > it formats ../cases/gjs/component-class.gjs 1`] = `
"import Component from \\"@glimmer/component\\";

/** It's a component */
class MyComponent extends Component {
  <template>
    <h1>
      Class top level template. Class top level template. Class top level
      template. Class top level template. Class top level template.
    </h1>
  </template>
  [\\"oops\\"];
}
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, with newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `
"import Component from \\"@glimmer/component\\";

/** It's a component */
class MyComponent extends Component {
  get whatever() {}

  <template>
    <h1>
      Class top level template. Class top level template. Class top level
      template. Class top level template. Class top level template.
    </h1>
  </template>
  [\\"oops\\"];
}
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, with newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, with newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, with newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"const num = 1;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, with newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
[\\"oops\\"];

const What = <template>Hi</template>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, with newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2 = <template>Second module variable template.</template>,
  num = 1;
[\\"oops\\"];

const bool = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4 = <template>Second module variable template.</template>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, with newline > it formats ../cases/gjs/simple.gjs 1`] = `
"<template>
  what
</template>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, with newline > it formats ../cases/gts/component-class.gts 1`] = `
"import Component from \\"@glimmer/component\\";

export interface Signature {
  Element: HTMLElement;
  Args: {
    myArg: string;
  };
  Yields: [];
}

/** It's a component */
class MyComponent extends Component<Signature> {
  <template>
    <h1>
      Class top level template. Class top level template. Class top level
      template. Class top level template. Class top level template.
    </h1>
  </template>
  [\\"oops\\"];
}
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, with newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, with newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported: TemplateOnlyComponent<Signature> = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, with newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, with newline > it formats ../cases/gts/js-only.gts 1`] = `
"const num: number = 1;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, with newline > it formats ../cases/gts/mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private: TemplateOnlyComponent<Signature> = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, with newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, with newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>,
  num = 1;
[\\"oops\\"];

const bool: boolean = false,
  ModVar3: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, with newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar2 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>,
  num = 1;
[\\"oops\\"];

const bool: boolean = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar4 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, with newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, without newline > it formats ../cases/gjs/component-class.gjs 1`] = `
"import Component from \\"@glimmer/component\\";

/** It's a component */
class MyComponent extends Component {
  <template>
    <h1>
      Class top level template. Class top level template. Class top level
      template. Class top level template. Class top level template.
    </h1>
  </template>
  [\\"oops\\"];
}
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, without newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `
"import Component from \\"@glimmer/component\\";

/** It's a component */
class MyComponent extends Component {
  get whatever() {}

  <template>
    <h1>
      Class top level template. Class top level template. Class top level
      template. Class top level template. Class top level template.
    </h1>
  </template>
  [\\"oops\\"];
}
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, without newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, without newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, without newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"const num = 1;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, without newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
[\\"oops\\"];

const What = <template>Hi</template>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, without newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2 = <template>Second module variable template.</template>,
  num = 1;
[\\"oops\\"];

const bool = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4 = <template>Second module variable template.</template>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, without newline > it formats ../cases/gjs/simple.gjs 1`] = `
"<template>
  what
</template>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, without newline > it formats ../cases/gts/component-class.gts 1`] = `
"import Component from \\"@glimmer/component\\";

export interface Signature {
  Element: HTMLElement;
  Args: {
    myArg: string;
  };
  Yields: [];
}

/** It's a component */
class MyComponent extends Component<Signature> {
  <template>
    <h1>
      Class top level template. Class top level template. Class top level
      template. Class top level template. Class top level template.
    </h1>
  </template>
  [\\"oops\\"];
}
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, without newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, without newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported: TemplateOnlyComponent<Signature> = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, without newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, without newline > it formats ../cases/gts/js-only.gts 1`] = `
"const num: number = 1;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, without newline > it formats ../cases/gts/mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private: TemplateOnlyComponent<Signature> = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, without newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, without newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>,
  num = 1;
[\\"oops\\"];

const bool: boolean = false,
  ModVar3: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, without newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar2 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>,
  num = 1;
[\\"oops\\"];

const bool: boolean = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar4 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > with semi, without newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, with newline > it formats ../cases/gjs/component-class.gjs 1`] = `
"import Component from \\"@glimmer/component\\";

/** It's a component */
class MyComponent extends Component {
  <template>
    <h1>
      Class top level template. Class top level template. Class top level
      template. Class top level template. Class top level template.
    </h1>
  </template>
  [\\"oops\\"];
}
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, with newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `
"import Component from \\"@glimmer/component\\";

/** It's a component */
class MyComponent extends Component {
  get whatever() {}

  <template>
    <h1>
      Class top level template. Class top level template. Class top level
      template. Class top level template. Class top level template.
    </h1>
  </template>
  [\\"oops\\"];
}
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, with newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, with newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, with newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"const num = (1)[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, with newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
[\\"oops\\"];

const What = <template>Hi</template>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, with newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2 = <template>Second module variable template.</template>,
  num = (1)[\\"oops\\"];

const bool = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4 = <template>Second module variable template.</template>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, with newline > it formats ../cases/gjs/simple.gjs 1`] = `
"<template>
  what
</template>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, with newline > it formats ../cases/gts/component-class.gts 1`] = `
"import Component from \\"@glimmer/component\\";

export interface Signature {
  Element: HTMLElement;
  Args: {
    myArg: string;
  };
  Yields: [];
}

/** It's a component */
class MyComponent extends Component<Signature> {
  <template>
    <h1>
      Class top level template. Class top level template. Class top level
      template. Class top level template. Class top level template.
    </h1>
  </template>
  [\\"oops\\"];
}
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, with newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, with newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported: TemplateOnlyComponent<Signature> = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, with newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, with newline > it formats ../cases/gts/js-only.gts 1`] = `
"const num: number = (1)[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, with newline > it formats ../cases/gts/mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private: TemplateOnlyComponent<Signature> = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, with newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, with newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>,
  num = (1)[\\"oops\\"];

const bool: boolean = false,
  ModVar3: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, with newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar2 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>,
  num = (1)[\\"oops\\"];

const bool: boolean = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar4 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, with newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, without newline > it formats ../cases/gjs/component-class.gjs 1`] = `
"import Component from \\"@glimmer/component\\";
/** It's a component */
class MyComponent extends Component {
  <template>
    <h1>
      Class top level template. Class top level template. Class top level
      template. Class top level template. Class top level template.
    </h1>
  </template>
  [\\"oops\\"];
}
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, without newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `
"import Component from \\"@glimmer/component\\";
/** It's a component */
class MyComponent extends Component {
  get whatever() {}

  <template>
    <h1>
      Class top level template. Class top level template. Class top level
      template. Class top level template. Class top level template.
    </h1>
  </template>
  [\\"oops\\"];
}
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, without newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, without newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, without newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"const num = (1)[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, without newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
[\\"oops\\"];

const What = <template>Hi</template>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, without newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2 = <template>Second module variable template.</template>,
  num = (1)[\\"oops\\"];

const bool = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4 = <template>Second module variable template.</template>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, without newline > it formats ../cases/gjs/simple.gjs 1`] = `
"<template>
  what
</template>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, without newline > it formats ../cases/gts/component-class.gts 1`] = `
"import Component from \\"@glimmer/component\\";
export interface Signature {
  Element: HTMLElement;
  Args: {
    myArg: string;
  };
  Yields: [];
}

/** It's a component */
class MyComponent extends Component<Signature> {
  <template>
    <h1>
      Class top level template. Class top level template. Class top level
      template. Class top level template. Class top level template.
    </h1>
  </template>
  [\\"oops\\"];
}
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, without newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, without newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported: TemplateOnlyComponent<Signature> = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, without newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, without newline > it formats ../cases/gts/js-only.gts 1`] = `
"const num: number = (1)[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, without newline > it formats ../cases/gts/mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private: TemplateOnlyComponent<Signature> = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, without newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, without newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>,
  num = (1)[\\"oops\\"];

const bool: boolean = false,
  ModVar3: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, without newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar2 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>,
  num = (1)[\\"oops\\"];

const bool: boolean = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar4 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > ["oops"] > without semi, without newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
[\\"oops\\"];
"
`;

exports[`ambiguous > config > default > \`oops\` > with semi, with newline > it formats ../cases/gjs/component-class.gjs 1`] = `[Error: Parse Error at <anon>:11:3: 11:4]`;

exports[`ambiguous > config > default > \`oops\` > with semi, with newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `[Error: Parse Error at <anon>:13:3: 13:4]`;

exports[`ambiguous > config > default > \`oops\` > with semi, with newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > with semi, with newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > with semi, with newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"const num = 1;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > with semi, with newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
\`oops\`;

const What = <template>Hi</template>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > with semi, with newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2 = <template>Second module variable template.</template>,
  num = 1;
\`oops\`;

const bool = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4 = <template>Second module variable template.</template>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > with semi, with newline > it formats ../cases/gjs/simple.gjs 1`] = `
"<template>
  what
</template>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > with semi, with newline > it formats ../cases/gts/component-class.gts 1`] = `[Error: Parse Error at <anon>:20:3: 20:4]`;

exports[`ambiguous > config > default > \`oops\` > with semi, with newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > with semi, with newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported: TemplateOnlyComponent<Signature> = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > with semi, with newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > with semi, with newline > it formats ../cases/gts/js-only.gts 1`] = `
"const num: number = 1;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > with semi, with newline > it formats ../cases/gts/mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private: TemplateOnlyComponent<Signature> = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > with semi, with newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > with semi, with newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>,
  num = 1;
\`oops\`;

const bool: boolean = false,
  ModVar3: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > with semi, with newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar2 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>,
  num = 1;
\`oops\`;

const bool: boolean = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar4 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > with semi, with newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > with semi, without newline > it formats ../cases/gjs/component-class.gjs 1`] = `[Error: Parse Error at <anon>:10:17: 10:18]`;

exports[`ambiguous > config > default > \`oops\` > with semi, without newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `[Error: Parse Error at <anon>:12:17: 12:18]`;

exports[`ambiguous > config > default > \`oops\` > with semi, without newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > with semi, without newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > with semi, without newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"const num = 1;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > with semi, without newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
\`oops\`;

const What = <template>Hi</template>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > with semi, without newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2 = <template>Second module variable template.</template>,
  num = 1;
\`oops\`;

const bool = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4 = <template>Second module variable template.</template>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > with semi, without newline > it formats ../cases/gjs/simple.gjs 1`] = `
"<template>
  what
</template>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > with semi, without newline > it formats ../cases/gts/component-class.gts 1`] = `[Error: Parse Error at <anon>:19:17: 19:18]`;

exports[`ambiguous > config > default > \`oops\` > with semi, without newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > with semi, without newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported: TemplateOnlyComponent<Signature> = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > with semi, without newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > with semi, without newline > it formats ../cases/gts/js-only.gts 1`] = `
"const num: number = 1;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > with semi, without newline > it formats ../cases/gts/mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private: TemplateOnlyComponent<Signature> = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > with semi, without newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > with semi, without newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>,
  num = 1;
\`oops\`;

const bool: boolean = false,
  ModVar3: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > with semi, without newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar2 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>,
  num = 1;
\`oops\`;

const bool: boolean = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar4 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > with semi, without newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > without semi, with newline > it formats ../cases/gjs/component-class.gjs 1`] = `[Error: Parse Error at <anon>:11:3: 11:4]`;

exports[`ambiguous > config > default > \`oops\` > without semi, with newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `[Error: Parse Error at <anon>:13:3: 13:4]`;

exports[`ambiguous > config > default > \`oops\` > without semi, with newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > without semi, with newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > without semi, with newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"const num = 1\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > without semi, with newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
\`oops\`;

const What = <template>Hi</template>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > without semi, with newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2 = <template>Second module variable template.</template>,
  num = 1\`oops\`;

const bool = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4 = <template>Second module variable template.</template>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > without semi, with newline > it formats ../cases/gjs/simple.gjs 1`] = `
"<template>
  what
</template>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > without semi, with newline > it formats ../cases/gts/component-class.gts 1`] = `[Error: Parse Error at <anon>:20:3: 20:4]`;

exports[`ambiguous > config > default > \`oops\` > without semi, with newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > without semi, with newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported: TemplateOnlyComponent<Signature> = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > without semi, with newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > without semi, with newline > it formats ../cases/gts/js-only.gts 1`] = `
"const num: number = 1\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > without semi, with newline > it formats ../cases/gts/mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private: TemplateOnlyComponent<Signature> = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > without semi, with newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > without semi, with newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>,
  num = 1\`oops\`;

const bool: boolean = false,
  ModVar3: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > without semi, with newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar2 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>,
  num = 1\`oops\`;

const bool: boolean = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar4 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > without semi, with newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > without semi, without newline > it formats ../cases/gjs/component-class.gjs 1`] = `[Error: Parse Error at <anon>:10:3: 10:4]`;

exports[`ambiguous > config > default > \`oops\` > without semi, without newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `[Error: Parse Error at <anon>:12:3: 12:4]`;

exports[`ambiguous > config > default > \`oops\` > without semi, without newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > without semi, without newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > without semi, without newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"const num = 1\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > without semi, without newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
\`oops\`;

const What = <template>Hi</template>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > without semi, without newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2 = <template>Second module variable template.</template>,
  num = 1\`oops\`;

const bool = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4 = <template>Second module variable template.</template>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > without semi, without newline > it formats ../cases/gjs/simple.gjs 1`] = `
"<template>
  what
</template>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > without semi, without newline > it formats ../cases/gts/component-class.gts 1`] = `[Error: Parse Error at <anon>:19:3: 19:4]`;

exports[`ambiguous > config > default > \`oops\` > without semi, without newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > without semi, without newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported: TemplateOnlyComponent<Signature> = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > without semi, without newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > without semi, without newline > it formats ../cases/gts/js-only.gts 1`] = `
"const num: number = 1\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > without semi, without newline > it formats ../cases/gts/mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private: TemplateOnlyComponent<Signature> = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > without semi, without newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > without semi, without newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>,
  num = 1\`oops\`;

const bool: boolean = false,
  ModVar3: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > without semi, without newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar2 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>,
  num = 1\`oops\`;

const bool: boolean = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar4 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > \`oops\` > without semi, without newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
\`oops\`;
"
`;

exports[`ambiguous > config > default > -"oops" > with semi, with newline > it formats ../cases/gjs/component-class.gjs 1`] = `[Error: Parse Error at <anon>:11:3: 11:4]`;

exports[`ambiguous > config > default > -"oops" > with semi, with newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `[Error: Parse Error at <anon>:13:3: 13:4]`;

exports[`ambiguous > config > default > -"oops" > with semi, with newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > with semi, with newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > with semi, with newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"const num = 1;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > with semi, with newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
-\\"oops\\";

const What = <template>Hi</template>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > with semi, with newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2 = <template>Second module variable template.</template>,
  num = 1;
-\\"oops\\";

const bool = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4 = <template>Second module variable template.</template>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > with semi, with newline > it formats ../cases/gjs/simple.gjs 1`] = `
"<template>
  what
</template>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > with semi, with newline > it formats ../cases/gts/component-class.gts 1`] = `[Error: Parse Error at <anon>:20:3: 20:4]`;

exports[`ambiguous > config > default > -"oops" > with semi, with newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > with semi, with newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported: TemplateOnlyComponent<Signature> = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > with semi, with newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > with semi, with newline > it formats ../cases/gts/js-only.gts 1`] = `
"const num: number = 1;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > with semi, with newline > it formats ../cases/gts/mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private: TemplateOnlyComponent<Signature> = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > with semi, with newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > with semi, with newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>,
  num = 1;
-\\"oops\\";

const bool: boolean = false,
  ModVar3: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > with semi, with newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar2 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>,
  num = 1;
-\\"oops\\";

const bool: boolean = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar4 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > with semi, with newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > with semi, without newline > it formats ../cases/gjs/component-class.gjs 1`] = `[Error: Parse Error at <anon>:10:17: 10:18]`;

exports[`ambiguous > config > default > -"oops" > with semi, without newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `[Error: Parse Error at <anon>:12:17: 12:18]`;

exports[`ambiguous > config > default > -"oops" > with semi, without newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > with semi, without newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > with semi, without newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"const num = 1;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > with semi, without newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
-\\"oops\\";

const What = <template>Hi</template>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > with semi, without newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2 = <template>Second module variable template.</template>,
  num = 1;
-\\"oops\\";

const bool = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4 = <template>Second module variable template.</template>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > with semi, without newline > it formats ../cases/gjs/simple.gjs 1`] = `
"<template>
  what
</template>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > with semi, without newline > it formats ../cases/gts/component-class.gts 1`] = `[Error: Parse Error at <anon>:19:17: 19:18]`;

exports[`ambiguous > config > default > -"oops" > with semi, without newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > with semi, without newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported: TemplateOnlyComponent<Signature> = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > with semi, without newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > with semi, without newline > it formats ../cases/gts/js-only.gts 1`] = `
"const num: number = 1;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > with semi, without newline > it formats ../cases/gts/mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private: TemplateOnlyComponent<Signature> = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > with semi, without newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > with semi, without newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>,
  num = 1;
-\\"oops\\";

const bool: boolean = false,
  ModVar3: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > with semi, without newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar2 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>,
  num = 1;
-\\"oops\\";

const bool: boolean = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar4 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > with semi, without newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > without semi, with newline > it formats ../cases/gjs/component-class.gjs 1`] = `[Error: Parse Error at <anon>:11:3: 11:4]`;

exports[`ambiguous > config > default > -"oops" > without semi, with newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `[Error: Parse Error at <anon>:13:3: 13:4]`;

exports[`ambiguous > config > default > -"oops" > without semi, with newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > without semi, with newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > without semi, with newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"const num = 1 - \\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > without semi, with newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
-\\"oops\\";

const What = <template>Hi</template>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > without semi, with newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2 = <template>Second module variable template.</template>,
  num = 1 - \\"oops\\";

const bool = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4 = <template>Second module variable template.</template>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > without semi, with newline > it formats ../cases/gjs/simple.gjs 1`] = `
"<template>
  what
</template>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > without semi, with newline > it formats ../cases/gts/component-class.gts 1`] = `[Error: Parse Error at <anon>:20:3: 20:4]`;

exports[`ambiguous > config > default > -"oops" > without semi, with newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export default (<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>) - \\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > without semi, with newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported: TemplateOnlyComponent<Signature> = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > without semi, with newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported =
  (<template>
    Exported variable template. Exported variable template. Exported variable
    template. Exported variable template. Exported variable template. Exported
    variable template. Exported variable template.
  </template> as TemplateOnlyComponent<Signature>) - \\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > without semi, with newline > it formats ../cases/gts/js-only.gts 1`] = `
"const num: number = 1 - \\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > without semi, with newline > it formats ../cases/gts/mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private: TemplateOnlyComponent<Signature> = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > without semi, with newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private =
  (<template>
    Private variable template. Private variable template. Private variable
    template. Private variable template. Private variable template. Private
    variable template. Private variable template.
  </template> as TemplateOnlyComponent<Signature>) - \\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > without semi, with newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>,
  num = 1 - \\"oops\\";

const bool: boolean = false,
  ModVar3: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > without semi, with newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar2 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>,
  num = 1 - \\"oops\\";

const bool: boolean = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar4 =
    (<template>
      Second module variable template.
    </template> as TemplateOnlyComponent<Signature>) - \\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > without semi, with newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

(<template>what</template> as TemplateOnlyComponent<Signature>) - \\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > without semi, without newline > it formats ../cases/gjs/component-class.gjs 1`] = `[Error: Parse Error at <anon>:10:3: 10:4]`;

exports[`ambiguous > config > default > -"oops" > without semi, without newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `[Error: Parse Error at <anon>:12:3: 12:4]`;

exports[`ambiguous > config > default > -"oops" > without semi, without newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > without semi, without newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > without semi, without newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"const num = 1 - \\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > without semi, without newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
-\\"oops\\";

const What = <template>Hi</template>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > without semi, without newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2 = <template>Second module variable template.</template>,
  num = 1 - \\"oops\\";

const bool = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4 = <template>Second module variable template.</template>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > without semi, without newline > it formats ../cases/gjs/simple.gjs 1`] = `
"<template>
  what
</template>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > without semi, without newline > it formats ../cases/gts/component-class.gts 1`] = `[Error: Parse Error at <anon>:19:3: 19:4]`;

exports[`ambiguous > config > default > -"oops" > without semi, without newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export default (<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>) - \\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > without semi, without newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported: TemplateOnlyComponent<Signature> = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > without semi, without newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported =
  (<template>
    Exported variable template. Exported variable template. Exported variable
    template. Exported variable template. Exported variable template. Exported
    variable template. Exported variable template.
  </template> as TemplateOnlyComponent<Signature>) - \\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > without semi, without newline > it formats ../cases/gts/js-only.gts 1`] = `
"const num: number = 1 - \\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > without semi, without newline > it formats ../cases/gts/mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private: TemplateOnlyComponent<Signature> = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > without semi, without newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private =
  (<template>
    Private variable template. Private variable template. Private variable
    template. Private variable template. Private variable template. Private
    variable template. Private variable template.
  </template> as TemplateOnlyComponent<Signature>) - \\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > without semi, without newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>,
  num = 1 - \\"oops\\";

const bool: boolean = false,
  ModVar3: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>;
-\\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > without semi, without newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar2 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>,
  num = 1 - \\"oops\\";

const bool: boolean = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar4 =
    (<template>
      Second module variable template.
    </template> as TemplateOnlyComponent<Signature>) - \\"oops\\";
"
`;

exports[`ambiguous > config > default > -"oops" > without semi, without newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

(<template>what</template> as TemplateOnlyComponent<Signature>) - \\"oops\\";
"
`;

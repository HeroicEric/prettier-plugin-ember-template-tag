// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, with newline > it formats ../cases/gjs/component-class.gjs 1`] = `
"
Error: Parse Error at <anon>:11:3: 11:4
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, with newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `
"
Error: Parse Error at <anon>:13:3: 13:4
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, with newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, with newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, with newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"const num = 1;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, with newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
(oh, no) => {};

const What = <template>Hi</template>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, with newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2 = <template>Second module variable template.</template>,
  num = 1;
(oh, no) => {};

const bool = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4 = <template>Second module variable template.</template>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, with newline > it formats ../cases/gjs/simple.gjs 1`] = `
"<template>
  what
</template>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, with newline > it formats ../cases/gts/component-class.gts 1`] = `
"
Error: Parse Error at <anon>:20:3: 20:4
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, with newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, with newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported: TemplateOnlyComponent<Signature> = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, with newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, with newline > it formats ../cases/gts/js-only.gts 1`] = `
"const num: number = 1;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, with newline > it formats ../cases/gts/mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private: TemplateOnlyComponent<Signature> = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, with newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, with newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>,
  num = 1;
(oh, no) => {};

const bool: boolean = false,
  ModVar3: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, with newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar2 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>,
  num = 1;
(oh, no) => {};

const bool: boolean = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar4 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, with newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, without newline > it formats ../cases/gjs/component-class.gjs 1`] = `
"
Error: Parse Error at <anon>:10:17: 10:18
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, without newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `
"
Error: Parse Error at <anon>:12:17: 12:18
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, without newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, without newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, without newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"const num = 1;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, without newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
(oh, no) => {};

const What = <template>Hi</template>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, without newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2 = <template>Second module variable template.</template>,
  num = 1;
(oh, no) => {};

const bool = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4 = <template>Second module variable template.</template>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, without newline > it formats ../cases/gjs/simple.gjs 1`] = `
"<template>
  what
</template>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, without newline > it formats ../cases/gts/component-class.gts 1`] = `
"
Error: Parse Error at <anon>:19:17: 19:18
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, without newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, without newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported: TemplateOnlyComponent<Signature> = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, without newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, without newline > it formats ../cases/gts/js-only.gts 1`] = `
"const num: number = 1;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, without newline > it formats ../cases/gts/mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private: TemplateOnlyComponent<Signature> = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, without newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, without newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>,
  num = 1;
(oh, no) => {};

const bool: boolean = false,
  ModVar3: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, without newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar2 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>,
  num = 1;
(oh, no) => {};

const bool: boolean = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar4 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > with semi, without newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, with newline > it formats ../cases/gjs/component-class.gjs 1`] = `
"
Error: Parse Error at <anon>:11:3: 11:4
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, with newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `
"
Error: Parse Error at <anon>:13:3: 13:4
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, with newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"
Error: Parse Error at <anon>:2:10: 2:12
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, with newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"
Error: Parse Error at <anon>:5:14: 5:15
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, with newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"
Error: Parse Error at <anon>:2:20: 2:21
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, with newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"
Error: Parse Error at <anon>:5:14: 5:15
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, with newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"
Error: Parse Error at <anon>:9:18: 9:19
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, with newline > it formats ../cases/gjs/simple.gjs 1`] = `
"
Error: Parse Error at <anon>:4:22: 4:24
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, with newline > it formats ../cases/gts/component-class.gts 1`] = `
"
Error: Parse Error at <anon>:20:3: 20:4
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, with newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, with newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"
Error: Parse Error at <anon>:14:14: 14:15
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, with newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, with newline > it formats ../cases/gts/js-only.gts 1`] = `
"
Error: Parse Error at <anon>:2:20: 2:21
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, with newline > it formats ../cases/gts/mod-var.gts 1`] = `
"
Error: Parse Error at <anon>:14:14: 14:15
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, with newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, with newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"
Error: Parse Error at <anon>:20:18: 20:19
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, with newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"
Error: Parse Error at <anon>:20:18: 20:19
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, with newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, without newline > it formats ../cases/gjs/component-class.gjs 1`] = `
"
Error: Parse Error at <anon>:10:3: 10:4
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, without newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `
"
Error: Parse Error at <anon>:12:3: 12:4
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, without newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"
Error: Parse Error at <anon>:2:10: 2:12
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, without newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"
Error: Parse Error at <anon>:5:14: 5:15
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, without newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"
Error: Parse Error at <anon>:1:39: 1:40
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, without newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"
Error: Parse Error at <anon>:5:14: 5:15
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, without newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"
Error: Parse Error at <anon>:8:29: 8:30
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, without newline > it formats ../cases/gjs/simple.gjs 1`] = `
"
Error: Parse Error at <anon>:4:22: 4:24
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, without newline > it formats ../cases/gts/component-class.gts 1`] = `
"
Error: Parse Error at <anon>:19:3: 19:4
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, without newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, without newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"
Error: Parse Error at <anon>:13:14: 13:15
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, without newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, without newline > it formats ../cases/gts/js-only.gts 1`] = `
"
Error: Parse Error at <anon>:1:49: 1:50
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, without newline > it formats ../cases/gts/mod-var.gts 1`] = `
"
Error: Parse Error at <anon>:13:14: 13:15
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, without newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, without newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"
Error: Parse Error at <anon>:18:29: 18:30
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, without newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"
Error: Parse Error at <anon>:18:29: 18:30
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oh, no) => {} > without semi, without newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
(oh, no) => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, with newline > it formats ../cases/gjs/component-class.gjs 1`] = `
"
Error: Parse Error at <anon>:11:3: 11:4
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, with newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `
"
Error: Parse Error at <anon>:13:3: 13:4
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, with newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template>
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, with newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, with newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"const num = 1;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, with newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
oops => {};

const What = <template>Hi</template>;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, with newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2 = <template>Second module variable template.</template>,
  num = 1;
oops => {};

const bool = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4 = <template>Second module variable template.</template>;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, with newline > it formats ../cases/gjs/simple.gjs 1`] = `
"<template>
  what
</template>
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, with newline > it formats ../cases/gts/component-class.gts 1`] = `
"
Error: Parse Error at <anon>:20:3: 20:4
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, with newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, with newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported: TemplateOnlyComponent<Signature> = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, with newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, with newline > it formats ../cases/gts/js-only.gts 1`] = `
"const num: number = 1;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, with newline > it formats ../cases/gts/mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private: TemplateOnlyComponent<Signature> = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, with newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, with newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>,
  num = 1;
oops => {};

const bool: boolean = false,
  ModVar3: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, with newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar2 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>,
  num = 1;
oops => {};

const bool: boolean = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar4 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, with newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, without newline > it formats ../cases/gjs/component-class.gjs 1`] = `
"
Error: Parse Error at <anon>:10:17: 10:18
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, without newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `
"
Error: Parse Error at <anon>:12:17: 12:18
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, without newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template>
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, without newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, without newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"const num = 1;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, without newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
oops => {};

const What = <template>Hi</template>;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, without newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2 = <template>Second module variable template.</template>,
  num = 1;
oops => {};

const bool = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4 = <template>Second module variable template.</template>;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, without newline > it formats ../cases/gjs/simple.gjs 1`] = `
"<template>
  what
</template>
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, without newline > it formats ../cases/gts/component-class.gts 1`] = `
"
Error: Parse Error at <anon>:19:17: 19:18
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, without newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, without newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported: TemplateOnlyComponent<Signature> = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template>;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, without newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, without newline > it formats ../cases/gts/js-only.gts 1`] = `
"const num: number = 1;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, without newline > it formats ../cases/gts/mod-var.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private: TemplateOnlyComponent<Signature> = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template>;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, without newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, without newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar2: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>,
  num = 1;
oops => {};

const bool: boolean = false,
  ModVar3: TemplateOnlyComponent<Signature> = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template>,
  ModVar4: TemplateOnlyComponent<Signature> = <template>
    Second module variable template.
  </template>;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, without newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const ModVar1 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar2 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>,
  num = 1;
oops => {};

const bool: boolean = false,
  ModVar3 = <template>
    <h1>
      Module variable template. Module variable template. Module variable
      template. Module variable template. Module variable template. Module
      variable template. Module variable template. Module variable template.
    </h1>
  </template> as TemplateOnlyComponent<Signature>,
  ModVar4 = <template>
    Second module variable template.
  </template> as TemplateOnlyComponent<Signature>;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > with semi, without newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, with newline > it formats ../cases/gjs/component-class.gjs 1`] = `
"
Error: Parse Error at <anon>:11:3: 11:4
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, with newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `
"
Error: Parse Error at <anon>:13:3: 13:4
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, with newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"
Error: Parse Error at <anon>:2:8: 2:10
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, with newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"
Error: Parse Error at <anon>:5:12: 5:13
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, with newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"
Error: Parse Error at <anon>:2:18: 2:19
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, with newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"
Error: Parse Error at <anon>:5:12: 5:13
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, with newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"
Error: Parse Error at <anon>:9:16: 9:17
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, with newline > it formats ../cases/gjs/simple.gjs 1`] = `
"
Error: Parse Error at <anon>:4:20: 4:22
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, with newline > it formats ../cases/gts/component-class.gts 1`] = `
"
Error: Parse Error at <anon>:20:3: 20:4
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, with newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, with newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"
Error: Parse Error at <anon>:14:12: 14:13
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, with newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, with newline > it formats ../cases/gts/js-only.gts 1`] = `
"
Error: Parse Error at <anon>:2:18: 2:19
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, with newline > it formats ../cases/gts/mod-var.gts 1`] = `
"
Error: Parse Error at <anon>:14:12: 14:13
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, with newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, with newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"
Error: Parse Error at <anon>:20:16: 20:17
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, with newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"
Error: Parse Error at <anon>:20:16: 20:17
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, with newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";

export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, without newline > it formats ../cases/gjs/component-class.gjs 1`] = `
"
Error: Parse Error at <anon>:10:3: 10:4
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, without newline > it formats ../cases/gjs/component-class-with-content-before-template.gjs 1`] = `
"
Error: Parse Error at <anon>:12:3: 12:4
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, without newline > it formats ../cases/gjs/default-export.gjs 1`] = `
"
Error: Parse Error at <anon>:2:8: 2:10
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, without newline > it formats ../cases/gjs/exported-mod-var.gjs 1`] = `
"
Error: Parse Error at <anon>:5:12: 5:13
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, without newline > it formats ../cases/gjs/js-only.gjs 1`] = `
"
Error: Parse Error at <anon>:1:37: 1:38
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, without newline > it formats ../cases/gjs/mod-var.gjs 1`] = `
"
Error: Parse Error at <anon>:5:12: 5:13
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, without newline > it formats ../cases/gjs/multiple-declarations.gjs 1`] = `
"
Error: Parse Error at <anon>:8:27: 8:28
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, without newline > it formats ../cases/gjs/simple.gjs 1`] = `
"
Error: Parse Error at <anon>:4:20: 4:22
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, without newline > it formats ../cases/gts/component-class.gts 1`] = `
"
Error: Parse Error at <anon>:19:3: 19:4
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, without newline > it formats ../cases/gts/default-export.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  Explicit default export module top level component. Explicit default export
  module top level component. Explicit default export module top level
  component. Explicit default export module top level component. Explicit
  default export module top level component.
</template> as TemplateOnlyComponent<Signature>;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, without newline > it formats ../cases/gts/exported-mod-var.gts 1`] = `
"
Error: Parse Error at <anon>:13:12: 13:13
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, without newline > it formats ../cases/gts/exported-mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

export const Exported = <template>
  Exported variable template. Exported variable template. Exported variable
  template. Exported variable template. Exported variable template. Exported
  variable template. Exported variable template.
</template> as TemplateOnlyComponent<Signature>;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, without newline > it formats ../cases/gts/js-only.gts 1`] = `
"
Error: Parse Error at <anon>:1:47: 1:48
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, without newline > it formats ../cases/gts/mod-var.gts 1`] = `
"
Error: Parse Error at <anon>:13:12: 13:13
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, without newline > it formats ../cases/gts/mod-var-with-as.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

const Private = <template>
  Private variable template. Private variable template. Private variable
  template. Private variable template. Private variable template. Private
  variable template. Private variable template.
</template> as TemplateOnlyComponent<Signature>;
oops => {};
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, without newline > it formats ../cases/gts/multiple-declarations.gts 1`] = `
"
Error: Parse Error at <anon>:18:27: 18:28
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, without newline > it formats ../cases/gts/multiple-declarations-with-as.gts 1`] = `
"
Error: Parse Error at <anon>:18:27: 18:28
"
`;

exports[`ambiguous > config > arrowParens: "avoid" > (oops) => {} > without semi, without newline > it formats ../cases/gts/simple.gts 1`] = `
"import type { TemplateOnlyComponent } from \\"@ember/component/template-only\\";
export interface Signature {
  Element: HTMLElement;
  Args: {};
  Yields: [];
}

<template>
  what
</template> as TemplateOnlyComponent<Signature>;
oops => {};
"
`;
